
```{r resultstable}
#| echo: false
res_tib0 <- results %>%
  unnest(scaled_scores) %>%
  unnest(resources) %>%
  left_join(method_info %>% select(-commit_sha, -code_version, -task_id), by = "method_id") %>%
  filter(!is_baseline) %>%
  left_join(dataset_info %>% select(dataset_id, dataset_name, data_reference), by = "dataset_id")

res_tib1 <- res_tib0 %>% 
  group_by(method_id, method_name, paper_reference, code_url, code_version) %>%
  summarise_if(is.numeric, mean) %>%
  ungroup() %>%
  mutate(
    dataset_name = "Overall mean"
  ) %>%
  bind_rows(res_tib0)

  
res_tib <- res_tib1 %>%
  arrange(desc(mean_score)) %>%
  rowwise() %>%
  mutate(
    method_label = ifelse(is.na(paper_reference), method_name, glue::glue("{method_name} <sup>{cite_fun(paper_reference, format = 'html')}</sup>")),
    dataset_label = ifelse(is.na(data_reference), dataset_name, glue::glue("{dataset_name} <sup>{cite_fun(data_reference, format = 'html')}</sup>")),
    # method_label = method_name,
    # dataset_label = dataset_name,
    peak_memory_gb = peak_memory_mb / 1024
  ) %>%
  ungroup() %>%
  select(
    method_id,
    dataset_id,
    mean_score,
    any_of(metric_info$metric_id),
    duration_sec,
    cpu_pct,
    peak_memory_gb,
    method_label,
    dataset_label
  )

res_cn <- c(
  "Method",
  "Dataset",
  "Mean score",
  metric_info$metric_name,
  "Runtime (s)",
  "CPU (%)",
  "Memory (GB)"
)

# dt <- DT::datatable(
#   res_tib,
#   colnames = res_cn,
#   options = list(
#     dom = "Bt",
#     paging = FALSE,
#     columnDefs = list(
#       list(
#         searchPanes = list(show = FALSE),
#         targets = seq(2, ncol(res_tib)-1)
#       ),
#       list(
#         searchPanes = list(
#           preSelect = "Overall mean"
#         ),
#         targets = 1
#       )
#     ),
#     buttons = list(
#       "searchPanes",
#       "csv",
#       "excel"
#     ),
#     language = list(
#       searchPanes = list(collapse = "Filter datasets / methods")
#     ),
#     scrollX = TRUE
#   ),
#   escape = FALSE,
#   class = "stripe compact",
#   rownames = FALSE,
#   extensions = c("Select", "SearchPanes", "Buttons"),
#   caption = "Results table of the scores per method, dataset and metric (after scaling). Use the filters to make a custom subselection of methods and datasets. The \"Overall mean\" dataset is the mean value across all datasets."
# ) %>%
#   DT::formatRound(c("peak_memory_gb", "mean_score", metric_info$metric_id), digits = 2) %>%
#   DT::formatRound(c("cpu_pct", "duration_sec"), digits = 0)

# dt

# colnames(res_tib) <- res_cn

ojs_define(
  method_info_t = method_info,
  dataset_info_t = dataset_info,
  res_tib_t = res_tib
)
```

```{ojs}
//| echo: false
function sparkbar(min, max) {
  return x => htl.html`<div style="
    background: lightblue;
    width: ${100 * (Math.max(Math.min(x, max), min) - min) / (max - min)}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en")}`
}
```

```{ojs}
//| echo: false
//| column: screen-inset-shaded

res_tib = transpose(res_tib_t)
method_info = transpose(method_info_t)
dataset_info = transpose(dataset_info_t)

method_info_named = {
  return Object.fromEntries(method_info.map(x => [x.method_id, x]));
}
dataset_info_named = {
  return Object.fromEntries(dataset_info.map(x => [x.dataset_id, x]));
}

Inputs.table(res_tib, {
  format: {
    method_id: (id => {
      const method = method_info_named[id]

      return htl.html`${method.method_name} <a href="/bibliography.html#${method.paper_reference}"><sup>ref</sup></a>`;
    }),
    dataset_id: (id => {
      const dataset = dataset_info_named[id]

      return htl.html`${dataset.dataset_name} <a href="/bibliography.html#${dataset.data_reference}"><sup>ref</sup></a>`;
    }),
    // mean_score: sparkbar(d3.min(res_tib, d => d.mean_score), d3.max(res_tib, d => d.mean_score))
    mean_score: sparkbar(0, 1)
  },
  // width: {method_id: 100, dataset_id: 100},
  // maxWidth: 840,
  // layout: "fixed",
  sort: "Mean score",
  reverse: true,
  rows: 50
})

// guide: https://observablehq.com/@observablehq/input-table
// reference: https://github.com/observablehq/inputs/blob/main/README.md#table
```
